import assert from "assert";
import {select as d3_select} from "d3-selection";
import {graphviz as d3_graphviz} from "../index.js";
import it from "./jsdom.js";

const html = '<div id="expected-graph"></div><div id="actual-graph"></div>';

it("No edge is drawn when style is invis.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a -> b [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        const x1 = 20;
                        const y1 = -20;
                        const x2 = 40;
                        const y2 = -20;
                        actualGraphviz
                            .drawEdge(x1, y1, x2, y2, {style: 'invis', id: 'edge1'})
                            .insertDrawnEdge('a->b');

                        const expectedEdgeGroup = expectedGraph.selectAll('.edge');

                        const actualEdgeGroup = actualGraph.selectAll('.edge');

                        assert.equal(expectedEdgeGroup.size(), 0, 'No edge is generated by Graphviz when style is invis');
                        assert.equal(actualEdgeGroup.size(), 0, 'No edge is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Updating of an edge with style invis is ignored.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a -> b [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        const x1 = 20;
                        const y1 = -20;
                        const x2 = 40;
                        const y2 = -20;
                        actualGraphviz
                            .drawEdge(x1, y1, x2, y2, {style: 'invis', id: 'edge1'})
                            .updateDrawnEdge(x1 + 1, y1 + 1, x2 + 1, y2 + 1, {color: 'green'})
                            .insertDrawnEdge('a->b');

                        const expectedEdgeGroup = expectedGraph.selectAll('.edge');

                        const actualEdgeGroup = actualGraph.selectAll('.edge');

                        assert.equal(expectedEdgeGroup.size(), 0, 'No edge is generated by Graphviz when style is invis');
                        assert.equal(actualEdgeGroup.size(), 0, 'No edge is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Moving an edge with style invis is ignored.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a -> b [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        const x1 = 20;
                        const y1 = -20;
                        const x2 = 40;
                        const y2 = -20;
                        actualGraphviz
                            .drawEdge(x1, y1, x2, y2, {style: 'invis', id: 'edge1'})
                            .moveDrawnEdgeEndPoint(x2 + 1, y2 + 1)
                            .insertDrawnEdge('a->b');

                        const expectedEdgeGroup = expectedGraph.selectAll('.edge');

                        const actualEdgeGroup = actualGraph.selectAll('.edge');

                        assert.equal(expectedEdgeGroup.size(), 0, 'No edge is generated by Graphviz when style is invis');
                        assert.equal(actualEdgeGroup.size(), 0, 'No edge is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Removal of an edge with style invis is allowed.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a -> b [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        const x1 = 20;
                        const y1 = -20;
                        const x2 = 40;
                        const y2 = -20;
                        actualGraphviz
                            .drawEdge(x1, y1, x2, y2, {style: 'invis', id: 'edge1'})
                            .removeDrawnEdge();

                        const expectedEdgeGroup = expectedGraph.selectAll('.edge');

                        const actualEdgeGroup = actualGraph.selectAll('.edge');

                        assert.equal(expectedEdgeGroup.size(), 0, 'No edge is generated by Graphviz when style is invis');
                        assert.equal(actualEdgeGroup.size(), 0, 'No edge is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Changing an edge with style invis to a visible edge is allowed.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a -> b}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        const x1 = 20;
                        const y1 = -20;
                        const x2 = 40;
                        const y2 = -20;
                        actualGraphviz
                            .drawEdge(x1, y1, x2, y2, {style: 'invis', id: 'edge1'})
                            .updateDrawnEdge(x1, y1, x2, y2, {style: 'solid'})
                            .insertDrawnEdge('a->b');

                        const expectedEdgeGroup = expectedGraph.selectAll('.edge');

                        const actualEdgeGroup = actualGraph.selectAll('.edge');

                        assert.equal(expectedEdgeGroup.size(), 1, 'An edge is generated by Graphviz when style is not invis');
                        assert.equal(actualEdgeGroup.size(), 1, 'An edge is drawn when style is changed from invis');

                        const expectedEdgeTitle = expectedEdgeGroup.selectAll('title');
                        const expectedEdgeText = expectedEdgeGroup.selectAll('text');

                        const actualEdgeTitle = actualEdgeGroup.selectAll('title');

                        assert.equal(actualEdgeGroup.attr("id"), expectedEdgeGroup.attr("id"), 'id of group');

                        assert.equal(actualEdgeTitle.text(), expectedEdgeTitle.text(), 'text of title');

                        resolve();
                    });
            });
    }
}));
