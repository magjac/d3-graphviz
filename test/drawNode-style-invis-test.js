import assert from "assert";
import {select as d3_select} from "d3-selection";
import {graphviz as d3_graphviz} from "../index.js";
import it from "./jsdom.js";
import deepEqualData from "./deepEqualData.js";
import {translatePointsAttribute} from "../src/svg.js";

const html = '<div id="expected-graph"></div><div id="actual-graph"></div>';

it("No node is drawn when style is invis.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        var x = 30.64645;
                        var y = -30.9504;
                        actualGraphviz
                        .drawNode(x, y, 'a', {shape: 'box', style: 'invis', id: 'node1'})
                            .insertDrawnNode('a');

                        const expectedNodeGroup = expectedGraph.selectAll('.node');

                        const actualNodeGroup = actualGraph.selectAll('.node');

                        assert.equal(expectedNodeGroup.size(), 0, 'No node is generated by Graphviz when style is invis');
                        assert.equal(actualNodeGroup.size(), 0, 'No node is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Updating of a node with style invis is ignored.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        var x = 30.64645;
                        var y = -30.9504;
                        actualGraphviz
                        .drawNode(x, y, 'a', {shape: 'box', style: 'invis', id: 'node1'})
                            .updateDrawnNode(x + 1, y + 1, 'b', {color: 'green'})
                            .insertDrawnNode('a');

                        const expectedNodeGroup = expectedGraph.selectAll('.node');

                        const actualNodeGroup = actualGraph.selectAll('.node');

                        assert.equal(expectedNodeGroup.size(), 0, 'No node is generated by Graphviz when style is invis');
                        assert.equal(actualNodeGroup.size(), 0, 'No node is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Moving a node with style invis is ignored.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        var x = 30.64645;
                        var y = -30.9504;
                        actualGraphviz
                            .drawNode(x, y, 'a', {shape: 'box', style: 'invis', id: 'node1'})
                            .moveDrawnNode(x + 1, y + 1)
                            .insertDrawnNode('a');

                        const expectedNodeGroup = expectedGraph.selectAll('.node');

                        const actualNodeGroup = actualGraph.selectAll('.node');

                        assert.equal(expectedNodeGroup.size(), 0, 'No node is generated by Graphviz when style is invis');
                        assert.equal(actualNodeGroup.size(), 0, 'No node is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Removal of a node with style invis is allowed.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a [style="invis"]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        var x = 30.64645;
                        var y = -30.9504;
                        actualGraphviz
                            .drawNode(x, y, 'a', {shape: 'box', style: 'invis', id: 'node1'})
                            .removeDrawnNode();

                        const expectedNodeGroup = expectedGraph.selectAll('.node');

                        const actualNodeGroup = actualGraph.selectAll('.node');

                        assert.equal(expectedNodeGroup.size(), 0, 'No node is generated by Graphviz when style is invis');
                        assert.equal(actualNodeGroup.size(), 0, 'No node is drawn when style is invis');

                        resolve();
                    });
            });
    }
}));

it("Changing a node with style invis to a visible node is allowed.", html, () => new Promise(resolve => {
    var expectedGraph = d3_select("#expected-graph");
    var actualGraph = d3_select("#actual-graph");
    var actualGraphviz;
    var expectedGraphviz = d3_graphviz("#expected-graph")
        .on('initEnd', () => {
            actualGraphviz = d3_graphviz("#actual-graph")
                .on('initEnd', startTest);
        });

    function startTest() {
        expectedGraphviz
            .zoom(false)
            .renderDot('digraph {a [shape=box]}', function () {
                actualGraphviz
                    .renderDot('digraph {}', function () {
                        var x = 27;
                        var y = -18;
                        actualGraphviz
                        .drawNode(x, y, 'a', {shape: 'box', style: 'invis', id: 'node1'})
                            .updateDrawnNode(x, y, 'a', {style: 'solid'})
                            .insertDrawnNode('a');

                        const expectedNodeGroup = expectedGraph.selectAll('.node');

                        const actualNodeGroup = actualGraph.selectAll('.node');

                        assert.equal(expectedNodeGroup.size(), 1, 'A node is generated by Graphviz when style is not invis');
                        assert.equal(actualNodeGroup.size(), 1, 'A node is drawn when style is changed from invis');

                        const expectedNodeTitle = expectedNodeGroup.selectAll('title');
                        const expectedNodeShape = expectedNodeGroup.selectAll('polygon');
                        const expectedNodeText = expectedNodeGroup.selectAll('text');

                        const actualNodeTitle = actualNodeGroup.selectAll('title');
                        const actualNodeShape = actualNodeGroup.selectAll('polygon');
                        const actualNodeText = actualNodeGroup.selectAll('text');

                        assert.equal(actualNodeShape.size(), 1, 'A node is drawn with the originally specified shape when style is changed from invis');

                        var bbox = expectedNodeShape.node().getBBox();
                        bbox.cx = bbox.x + bbox.width / 2;
                        bbox.cy = bbox.y + bbox.height / 2;
                        var xoffs = x - bbox.cx;
                        var yoffs = y - bbox.cy;

                        assert.equal(actualNodeGroup.attr("id"), expectedNodeGroup.attr("id"), 'id of group');

                        assert.equal(actualNodeTitle.text(), expectedNodeTitle.text(), 'text of title');

                        assert.equal(actualNodeShape.attr("fill"), expectedNodeShape.attr("fill"), 'fill of polygon');
                        assert.equal(actualNodeShape.attr("stroke"), expectedNodeShape.attr("stroke"), 'stroke of polygon');
                        assert.equal(actualNodeShape.attr("points"), translatePointsAttribute(expectedNodeShape.attr("points"), xoffs, yoffs), 'points of polygon');

                        assert.equal(actualNodeText.attr("text-anchor"), expectedNodeText.attr("text-anchor"), 'text-anchor of text');
                        assert.equal(+actualNodeText.attr("x"), +expectedNodeText.attr("x") + xoffs, 'x of text');
                        assert.equal(+actualNodeText.attr("y"), +expectedNodeText.attr("y") + yoffs, 'y of text');
                        assert.equal(actualNodeText.attr("font-family"), expectedNodeText.attr("font-family"), 'font-family of text');
                        assert.equal(actualNodeText.attr("font-size"), expectedNodeText.attr("font-size"), 'font-size of text');
                        assert.equal(actualNodeText.attr("fill"), expectedNodeText.attr("fill"), 'fill of text');

                        assert.equal(actualNodeText.text(), expectedNodeText.text(), 'text of node group');

                        var actualNodeGroupDatum = actualNodeGroup.datum();
                        var expectedNodeGroupDatum = expectedNodeGroup.datum();
                        delete expectedNodeGroupDatum.parent;
                        deepEqualData(actualNodeGroupDatum, expectedNodeGroupDatum, 'data of drawn node of shape equals Graphviz generated data');

                        resolve();
                    });
            });
    }
}));
